{"version":3,"sources":["types/index.ts","components/confetti-ribbons.tsx","components/game-grid.tsx","utils/index.ts","redux/action-types/index.ts","config/index.ts","App.tsx","redux/actions/index.ts","redux/reducers/game-state-reducer.ts","redux/reducers/grid-reducer.ts","redux/reducers/initial-grid-reducer.ts","redux/reducers/moves-reducer.ts","redux/reducers/bingo-reduer.ts","redux/reducers/index.ts","redux/store/index.ts","serviceWorker.ts","index.tsx"],"names":["GameState","ConfettiRibbons","data-test","Array","from","length","map","v","index","className","GameGrid","props","grid","addMove","style","gridTemplateRows","gridTemplateColumns","row","ri","tile","ci","traversed","onClick","x","y","phrase","createGrid","pharses","columns","Math","floor","sqrt","rows","sPhrases","array","temporaryValue","randomIndex","currentIndex","random","shuffle","i","isTraversed","NEW_GAME","ADD_MOVE","SOLVED","BINGO","NO_BINGO","CONFIG","phrases","App","connect","gameState","bingo","newGame","dispatch","type","payload","position","getState","currentGrid","cloneGrid","isRowTraversed","column","isColumnTraversed","is1stDiagonalTraversed","is2ndDiagonalTraversed","setNoBingo","connector","useEffect","setTimeout","NOT_STARTED","initialState","GameStateReducer","state","action","IN_PROGRESS","GridReducer","InitialGridReducer","MovesReducer","BingoReducer","combineReducers","initialGrid","moves","middlewares","ReduxThunk","store","applyMiddleware","createStore","createStoreWithMiddleware","rootReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.df05d6f2.chunk.js","sourcesContent":["export enum GameState {\n    NOT_STARTED = \"NOT_STARTED\",\n    IN_PROGRESS = \"IN_PROGRESS\",\n    SOLVED = \"SOLVED\"\n}\n\nexport type TileGrid = TileRow[];\nexport type TileRow = Tile[];\n\nexport interface Tile {\n    phrase: string;\n    traversed: boolean;\n}\n\nexport interface TileGridPosition {\n    x: number;\n    y: number;\n}\n","import React from \"react\";\r\n\r\n/**\r\n * ConfettiRibbons component\r\n *\r\n * @constructor\r\n */\r\nconst ConfettiRibbons = (): JSX.Element => {\r\n    return (\r\n        <div data-test=\"component-confetti-ribbons\">\r\n            {Array.from({length: 200}).map((v: any, index: number) => (\r\n                <div data-test=\"elm-confetti-ribbon\" key={index} className={\"confetti-\" + (index + 1)}/>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ConfettiRibbons;","import {Tile, TileGrid, TileGridPosition, TileRow} from \"../types\";\nimport React, {CSSProperties} from \"react\";\n\nexport interface GameGridProps {\n    grid: TileGrid;\n    addMove: (position: TileGridPosition) => void;\n}\n\n/**\n * GameGrid component - renderers game board\n * @function GameGrid\n *\n * @param {GameGridProps} props\n * @constructor\n *\n * @return {JSX.Element}\n */\nconst GameGrid = (props: GameGridProps): JSX.Element => {\n    const {grid, addMove} = props;\n\n    const style: CSSProperties = {\n        gridTemplateRows: `repeat(${grid.length}, 1fr)`,\n        gridTemplateColumns: `repeat(${grid[0].length}, 1fr)`\n    };\n\n    return (\n        <div data-test=\"component-game-grid\"  className=\"game-grid-container\">\n            <div className=\"game-grid-wrapper\">\n                <div className=\"game-grid\" style={style}>\n                    {\n                        grid.map((row: TileRow, ri: number) => (\n                            row.map((tile: Tile, ci: number) => (\n                                <div data-test=\"grid-tile\" key={`${ri}-${ci}`}\n                                     className={(`d-flex flex-column grid-tile ` + (tile.traversed ? \"traversed\" : \"\"))}\n                                     {...(!tile.traversed && { onClick: () => addMove({x: ri, y: ci}) })}>\n                                    <div className=\"grid-tile-inner flex-1 d-flex text-center justify-content-center align-items-center m-2 p-1\"><span>{tile.phrase}</span></div>\n                                </div>\n                            ))\n                        ))\n                    }\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default GameGrid;\n","import {Tile, TileGrid, TileGridPosition, TileRow} from \"../types\";\n\n\nconst shuffle = (array: any[]): any => {\n    let currentIndex: number = array.length;\n    let temporaryValue: any;\n    let randomIndex: number;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n};\n\n/**\n * Creates grid for new game\n * @function createGrid\n *\n * @param {pharses} string[]\n *\n * @return {TileGrid}\n */\nconst createGrid = (pharses: string[]): TileGrid => {\n    const columns: number = Math.floor(Math.sqrt( pharses.length ));\n    const rows: number = columns;\n    const sPhrases: string[] = shuffle(pharses);\n\n    let i: number = 0;\n    const grid: TileGrid = Array.from({length: rows}).map((): Tile[] =>\n        Array.from({length: columns}).map((): Tile => ({\n            phrase: sPhrases[i++],\n            traversed: false\n        }))\n    );\n\n    return grid;\n}\n\n/**\n * Clones the given grid\n * @function cloneGrid\n *\n * @param {TileGrid} grid\n *\n * @return {TileGrid}\n */\nconst cloneGrid = (grid: TileGrid): TileGrid => grid.map((row: TileRow): TileRow =>\n    row.map(({phrase, traversed}: Tile): Tile => ({phrase, traversed}))\n);\n\n/**\n * Gets tile at given position\n * @function getTile\n * @param {TileGrid} grid\n * @param {number} x\n * @param {number} y\n *\n * @return {Tile | null}\n */\nconst getTile = (grid: TileGrid, x: number, y: number): Tile | null => {\n    return grid[x] && grid[x][y] ? grid[x][y] : null;\n};\n\n/**\n * Checks whether grid is fully traversed on not\n * @function isTraversed\n *\n * @param {TileGrid} grid\n *\n * @return {boolean}\n */\nconst isTraversed = (grid: TileGrid): boolean => {\n    for (const row of grid) {\n        for (const tile of row) {\n            if (!tile.traversed) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n};\n\n/**\n *\n * isRowTraversed\n *\n * @param {TileGrid} grid\n * @param {TileGridPosition} position\n *\n * @return {boolean}\n */\nconst isRowTraversed = ( grid: TileGrid, position: TileGridPosition ): boolean => {\n    const row: number = position.x;\n\n    if( !grid[row] ) {\n        return false;\n    }\n\n    for( let i = 0; i < grid.length; i++ ) {\n        const tile: Tile = grid[row][i];\n        if( !tile || !tile.traversed ) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\n/**\n *\n * isColumnTraversed\n *\n * @param {TileGrid} grid\n * @param {TileGridPosition} position\n *\n * @return {boolean}\n */\nconst isColumnTraversed = ( grid: TileGrid, position: TileGridPosition ): boolean => {\n    const column: number = position.y;\n\n    for( let i = 0; i < grid.length; i++ ) {\n        const tile: Tile | null = grid[i] && grid[i][column] ? grid[i][column] : null;\n        if( !tile || !tile.traversed ) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\n\n/**\n *\n * is1stDiagonalTraversed\n *\n * @param {TileGrid} grid\n * @param {TileGridPosition} position\n *\n * @return {boolean}\n */\nconst is1stDiagonalTraversed = ( grid: TileGrid, position: TileGridPosition ): boolean => {\n    if( position.x !== position.y ) {\n        return false;\n    }\n\n    for( let i = 0; i < grid.length; i++ ) {\n        const tile: Tile | null = grid[i] && grid[i][i] ? grid[i][i] : null;\n        if( !tile || !tile.traversed ) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\n/**\n *\n * is1stDiagonalTraversed\n *\n * @param {TileGrid} grid\n * @param {TileGridPosition} position\n *\n * @return {boolean}\n */\nconst is2ndDiagonalTraversed = ( grid: TileGrid, position: TileGridPosition ): boolean => {\n    const total : number = position.x + position.y;\n    if( total !== (grid.length - 1 ) ) {\n        return false;\n    }\n\n    for( let i = 0; i < grid.length; i++ ) {\n        const x: number = i;\n        const y: number = grid.length - i - 1;\n        const tile: Tile | null = grid[x] && grid[x][y] ? grid[x][y] : null;\n        if( !tile || !tile.traversed ) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\nexport {\n    cloneGrid,\n    createGrid,\n    isTraversed,\n    getTile,\n    isRowTraversed,\n    isColumnTraversed,\n    is1stDiagonalTraversed,\n    is2ndDiagonalTraversed\n};\n","import {TileGrid, TileGridPosition} from \"../../types\";\n\nexport const NEW_GAME = \"NEW_GAME\";\nexport const ADD_MOVE = \"ADD_MOVE\";\nexport const SOLVED = \"SOLVED\";\nexport const BINGO = \"BINGO\";\nexport const NO_BINGO = \"NO_BINGO\";\n\ninterface DefaultAction {\n    type: undefined | null;\n}\n\ninterface StartGameAction {\n    type: typeof NEW_GAME;\n    payload: {\n        grid: TileGrid;\n    };\n}\n\ninterface AddMoveAction {\n    type: typeof ADD_MOVE;\n    payload: {\n        position: TileGridPosition;\n        grid: TileGrid;\n    };\n}\n\ninterface SolvedAction {\n    type: typeof SOLVED;\n}\n\ninterface BingoAction {\n    type: typeof BINGO;\n}\n\ninterface NoBingoAction {\n    type: typeof NO_BINGO;\n}\n\nexport type GameActions =\n    DefaultAction\n    | StartGameAction\n    | AddMoveAction\n    | SolvedAction\n    | BingoAction\n    | NoBingoAction;\n","const CONFIG: Record<string, any> = {\n    phrases: [\n        '(child noises in the background)',\n        'Hello, hello',\n        'I need to jump in the another call',\n        'Can everyone go on mute?',\n        'Could you please get closer to the mic?',\n        '(load painful echo/feedback)',\n        'Next side please',\n        'Can we take this offline?',\n        'Is ___ on the call?',\n        'Could you please share these slides afterwards?',\n        'Can somebody grant presenter rights?',\n        'Can you email that to everyone?',\n        'Conf call Bingo',\n        'Sorry I had problems loging in',\n        '(animal noises in the background)',\n        'Sorry, I didn\\'t find the conference id',\n        'I was having connection issues',\n        'I\\'ll have to get back to you',\n        'Who just joined',\n        'Sorry, something ___ with my calendar',\n        'Do you see my screen?',\n        'Let\\'s wait for ___!',\n        'You will send the minutes',\n        'Sorry, I was on mute',\n        'Can you repeat please?'\n    ]\n};\n\nexport default CONFIG;\n","import React, {useEffect} from \"react\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {GameState, TileGrid} from \"./types\";\nimport {GameGrid, ConfettiRibbons} from \"./components\";\n\nimport {RootState} from \"./redux/store\";\nimport {addMove, newGame, setNoBingo} from \"./redux/actions\";\nimport CONFIG from \"./config\";\nimport {createGrid} from \"./utils\";\n\nconst mapStateToProps = ({gameState, grid, bingo}: RootState) => ({\n    gameState, grid, bingo\n});\n\nconst connector = connect(mapStateToProps, {newGame, addMove, setNoBingo});\n\nexport type AppProps = ConnectedProps<typeof connector>;\n\n/**\n * App component\n * @function DisconnectedApp\n *\n * @param {AppProps} props\n * @constructor\n *\n * @return {JSX.Element}\n */\nexport const DisconnectedApp = (props: AppProps): JSX.Element => {\n    const {gameState, grid, bingo, newGame, setNoBingo, addMove}: AppProps = props;\n\n    useEffect(()=> {\n        const grid: TileGrid = createGrid(CONFIG.phrases);\n        newGame(grid);\n    }, [newGame]);\n\n    useEffect(() => {\n        if( bingo ) {\n            setTimeout(()=> {\n                setNoBingo();\n            }, 5000);\n        }\n    }, [ bingo, setNoBingo ]);\n\n    return (\n        <div data-test=\"component-app\" className=\"d-flex justify-content-center align-items-center vw-100 vh-100\">\n            {(gameState !== GameState.NOT_STARTED && grid) ?\n                <GameGrid data-test=\"elm-game-grid\" grid={grid} addMove={addMove} /> : null}\n            {\n                bingo ? <ConfettiRibbons data-test=\"elm-confetti-ribbons\" /> : null\n            }\n        </div>\n    );\n}\n\nconst App = connector(DisconnectedApp);\n\nexport default App;\n","import {\n    TileGrid, TileGridPosition\n} from \"../../types\";\nimport {\n    cloneGrid,\n    is1stDiagonalTraversed, is2ndDiagonalTraversed,\n    isColumnTraversed,\n    isRowTraversed,\n    isTraversed\n} from \"../../utils\";\nimport {Dispatch} from \"redux\";\n\nimport {\n    ADD_MOVE, BINGO,\n    NEW_GAME, NO_BINGO,\n    SOLVED\n} from \"../action-types\";\nimport {RootState} from \"../store\";\n\n/**\n * Returns Redux Thunk function that dispatches NEW_GAME action\n *     and (conditionally) SOLVED action\n * @function newGame\n *\n * @param {TileGrid} grid - new grid.\n *\n * @returns {function} - Redux Thunk function.\n */\nexport const newGame = (grid: TileGrid) => (dispatch: Dispatch) => {\n    dispatch({\n        type: NEW_GAME,\n        payload: {grid}\n    });\n\n    if (isTraversed(grid)) {\n        dispatch({\n            type: SOLVED,\n            payload: grid\n        });\n    }\n};\n\n/**\n * Returns Redux Thunk function that dispatches ADD_MOVE action\n *     and (conditionally) SOLVED action\n * @function addMove\n *\n * @param {TileGridPosition} position - tile grid position.\n * @returns {function} - Redux Thunk function.\n */\nexport const addMove = (position: TileGridPosition) => (dispatch: Dispatch, getState: () => RootState) => {\n    const {grid: currentGrid}: RootState = getState();\n    const { x, y }: TileGridPosition = position;\n    if( currentGrid && currentGrid[x] && currentGrid[x][y]  ) {\n        currentGrid[x][y].traversed = true;\n    }\n\n    const grid: TileGrid | null = currentGrid ? cloneGrid( currentGrid ) : currentGrid;\n\n    dispatch({\n        type: ADD_MOVE,\n        payload: {\n            grid, position\n        }\n    });\n\n    if (grid) {\n        if( isRowTraversed(grid, position) || isColumnTraversed(grid, position) ||\n            is1stDiagonalTraversed(grid, position) || is2ndDiagonalTraversed(grid, position) ) {\n            dispatch({\n                type: BINGO\n            });\n        }\n\n        if( isTraversed(grid) ) {\n            dispatch({\n                type: SOLVED,\n                payload: grid\n            });\n        }\n    }\n};\n\n\n/**\n * Returns Redux Thunk function that dispatches NO_BINGO action\n * @function setNoBingo\n *\n * @returns {function} - Redux Thunk function.\n */\nexport const setNoBingo = () => (dispatch: Dispatch) => {\n    dispatch({type: NO_BINGO})\n};","import {GameState} from \"../../types\";\nimport {GameActions, NEW_GAME, SOLVED} from \"../action-types\";\n\nconst initialState: GameState = GameState.NOT_STARTED;\n\n/**\n * @function GameStateReducer\n *\n * @param {GameState} state - State before reducer.\n * @param {GameActions} action - Action sent to reducer.\n *\n * @returns {GameState} - New state.\n */\nconst GameStateReducer = (state: GameState = initialState, action: GameActions) => {\n    switch (action.type) {\n        case NEW_GAME:\n            return GameState.IN_PROGRESS;\n        case SOLVED:\n            return GameState.SOLVED;\n        default:\n            return state;\n    }\n}\n\nexport default GameStateReducer;\n","import {TileGrid} from \"../../types\";\nimport {ADD_MOVE, GameActions, NEW_GAME} from \"../action-types\";\n\nconst initialState: TileGrid | null = null;\n\n/**\n * @function GridReducer\n *\n * @param {TileGrid | null} state - State before reducer.\n * @param {GameActions} action - Action sent to reducer.\n *\n * @returns {TileGrid | null} - New state.\n */\nconst GridReducer = (state: TileGrid | null = initialState, action: GameActions) => {\n    switch (action.type) {\n        case NEW_GAME:\n            return action.payload.grid;\n        case ADD_MOVE:\n            return action.payload.grid;\n        default:\n            return state;\n    }\n}\n\nexport default GridReducer;\n","import {TileGrid} from \"../../types\";\nimport {GameActions, NEW_GAME} from \"../action-types\";\n\nconst initialState: TileGrid | null = null;\n\n/**\n * @function InitialGridReducer\n *\n * @param {TileGrid | null} state - State before reducer.\n * @param {GameActions} action - Action sent to reducer.\n *\n * @returns {TileGrid | null} - New state.\n */\nconst InitialGridReducer = (state: TileGrid | null = initialState, action: GameActions) => {\n    switch (action.type) {\n        case NEW_GAME:\n            return action.payload.grid;\n        default:\n            return state;\n    }\n}\n\nexport default InitialGridReducer;\n","import {TileGridPosition} from \"../../types\";\nimport {ADD_MOVE, GameActions, NEW_GAME} from \"../action-types\";\n\nconst initialState: TileGridPosition[] = [];\n\n/**\n * @function MovesReducer\n *\n * @param {TileGridPosition[]} state - State before reducer.\n * @param {GameActions} action - Action sent to reducer.\n *\n * @returns {TileGridPosition[]} - New state.\n */\nconst MovesReducer = (state: TileGridPosition[] = initialState, action: GameActions) => {\n    switch (action.type) {\n        case NEW_GAME:\n            return initialState;\n        case ADD_MOVE:\n            return [...state, action.payload.position];\n        default:\n            return state;\n    }\n}\n\nexport default MovesReducer;\n","import {GameActions, NEW_GAME, BINGO, NO_BINGO} from \"../action-types\";\r\n\r\nconst initialState: boolean = false;\r\n\r\n/**\r\n * @function BingoReducer\r\n *\r\n * @param {boolean} state - State before reducer.\r\n * @param {GameActions} action - Action sent to reducer.\r\n *\r\n * @returns {boolean} - New state.\r\n */\r\nconst BingoReducer = (state: boolean = initialState, action: GameActions): boolean => {\r\n    switch (action.type) {\r\n        case NEW_GAME:\r\n            return initialState;\r\n        case BINGO:\r\n            return true;\r\n        case NO_BINGO:\r\n            return false;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default BingoReducer;","import {combineReducers} from \"redux\";\nimport GameStateReducer from \"./game-state-reducer\";\nimport GridReducer from \"./grid-reducer\";\nimport InitialGridReducer from \"./initial-grid-reducer\";\nimport MovesReducer from \"./moves-reducer\";\nimport BingoReducer from \"./bingo-reduer\";\n\nexport default combineReducers({\n    gameState: GameStateReducer,\n    grid: GridReducer,\n    initialGrid: InitialGridReducer,\n    moves: MovesReducer,\n    bingo: BingoReducer\n});\n","import {applyMiddleware, createStore} from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\nimport rootReducer from \"../reducers\";\n\nexport const middlewares = [ReduxThunk];\nconst createStoreWithMiddleware = applyMiddleware(...middlewares)(createStore);\n\nconst store = createStoreWithMiddleware(rootReducer);\nexport type RootState = ReturnType<typeof store.getState>;\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                        \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {\"Service-Worker\": \"script\"},\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {Provider} from \"react-redux\";\nimport App from \"./App\";\n\nimport \"./style.scss\";\nimport store from \"./redux/store\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}